@using Phun.Extensions
@using StackExchange.Profiling;
@inherits System.Web.Mvc.WebViewPage
@{
    Layout = null;
    var basePath = this.Request.Path.ToLowerInvariant().Replace("/filemanager", string.Empty).TrimEnd('/');
}
<!DOCTYPE html>
<html>      
    <head>
        <meta charset="utf-8" />
        <title>Phun CMS file manager</title>
        @this.InitClientTimings()
        <script src="@Html.PhunResourceUrl("Scripts/jquery.js")" type="text/javascript"></script>
        <script src="@Html.PhunResourceUrl("Scripts/jqueryui.js")" type="text/javascript"></script>
        <script src="@Html.PhunResourceUrl("Scripts/jquery.cookie.js")" type="text/javascript"></script>
        <script src="@Html.PhunResourceUrl("Scripts/jquery.dynatree.js")" type="text/javascript"></script>

        <link rel="stylesheet" type="text/css" href="@Html.PhunResourceUrl("css/dynatree/ui.dynatree.css")">
        <script type="text/javascript"> 
            var initialUrl = window.location.hash.replace("#", "").toLowerCase();
            var initialUrlParts = initialUrl.split('/');
            var initialUrlLoading = "/";
            
            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                return (results == null) ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
            }
            
            // ckeditor callback model
            function ckEditorCallback(fileId) {
                var funcNum = getParameterByName('CKEditorFuncNum');
                window.opener.CKEDITOR.tools.callFunction(funcNum, '@basePath/Download' + fileId);
                window.close();
            }
            

            function continueInitialLoad() {
                var tree = $("#tree").dynatree("getTree");
                
                if (initialUrlLoading != initialUrl && $.isArray(initialUrlParts)) {
                    var part = initialUrlParts.pop();
                    while (initialUrlParts.length > 0 && part == "") {
                        part = initialUrlParts.pop();
                    }
                    if (part == "") return;
                    
                    initialUrlLoading += part;
                    var foundNode = tree.getNodeByKey(initialUrlLoading);
                    if (initialUrlParts.length > 0) {
                        initialUrlLoading += "/";
                        foundNode = tree.getNodeByKey(initialUrlLoading);
                        if (foundNode) {
                            foundNode.expand();
                        }
                    }
                    else if (foundNode) {
                        foundNode.activate();
                    } else {
                        foundNode = tree.getNodeByKey(initialUrlLoading + '/');
                        if (foundNode) {
                            foundNode.activate();
                        }
                    }
                }
                else if (initialUrlLoading == initialUrl) {
                    var foundNode = tree.getNodeByKey(initialUrlLoading);
                    if (foundNode) {
                        foundNode.activate();
                    }
                }
            }
            
            $(document).ready(function(){
                // Attach the dynatree widget to an existing <div id="tree"> element
                // and pass the tree options as an argument to the dynatree() function:
                var tree = $("#tree").dynatree({
                    rootVisible: true,
                    fx: { height: "toggle", duration: 200 },
                    autoFocus: false,
                    selectMode: 1,
                    clickFolderMode: 1,
                    persist: false,
                    autoCollapse: true,
                    initAjax: {
                        type: "POST",
                        url: "@basePath/FileManagerDynatree",
                        data: { path: '/' },
                        cache: false
                    },
                    onActivate: function (node) {
                        window.location.hash = node.data.key;
                        $(".path").html(window.location.hash.replace("#", ""));
                        $(".pathinput").val(window.location.hash.replace("#", ""));
                    },
                    onLazyRead: function (node) {
                        node.appendAjax({
                            type: "POST",
                            url: "@basePath/FileManagerDynatree",
                            data: { path: node.data.key },
                            cache: false,
                            success: function(loadedNode) {
                                var url = window.location.hash.replace("#", "");
                                if (url == "") {
                                    return;
                                }
                                continueInitialLoad();
                            }
                        });
                    },
                    onPostInit: function (isLoading, isError) {
                        if (initialUrlLoading != initialUrl && $.isArray(initialUrlParts)) {
                            initialUrlParts = initialUrlParts.reverse();
                        }
                        continueInitialLoad();
                    }
                });
            
                $(".new-page").click(function (e) {
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));
                    
                    if (window.location.hash == "#" || node == null) {
                        alert("Please select a folder.");
                        return false;
                    }

                    var the_name = window.prompt("Enter name of new page under current directory: ", "");

                    if (the_name != null && the_name != "") {
                        var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));
                        if (!node.data.isFolder) {
                            node = node.getParent();
                        }
                        var newKey = (node.data.key + the_name.replace(/\//gi, "").replace(/\\/gi, "") + "\/");
                        var newNode = node.addChild({ title: the_name, key: newKey, isFolder: true, isLazy: true });
                        $.ajax({
                            type: "POST",
                            url: "@basePath/Create",
                            data: { path: newKey + "_default", data: '' },
                            cache: false,
                            success: function (data) {
                                newNode.activate();
                            }
                        });
                    }
                });
                
                $(".new-directory").click(function (e) {
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));

                    if (window.location.hash == "#" || node == null) {
                        alert("Please select a folder.");
                        return false;
                    }

                    var the_name = window.prompt("Please note that directory does not exists on it's own.  You must upload file to persist.\r\nEnter name of new directory under current directory: ", "");
                
                    if (the_name != null && the_name != "") {
                        if (!node.data.isFolder) {
                            node = node.getParent();
                        }
                        var newKey = (node.data.key + the_name.replace(/\//gi, "").replace(/\\/gi, "") + "\/");
                        node.addChild({ title: the_name, key: newKey, isFolder: true });
                    }
                });
            
                $(".delete").click(function (e) {
                    if (window.location.hash == "#" || window.location.hash.replace("#", "") == "/") {
                        alert("Root path delete is not allowed.");
                        return false;
                    }
                
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));
                    var parent = node.getParent();
                    var message = "Delete " + (node.data.isFolder ? "folder: " : "file: ");
                    message += node.data.key + "?";
                    if (confirm(message)) {
                        $.ajax({
                            type: "DELETE",
                            url: "@basePath/Delete",
                            data: { path: window.location.hash.replace("#", "") },
                            cache: false,
                            success: function (data) {
                                parent.removeChild(node);
                            }
                        });
                    }
                });
            
                $(".upload").click(function(e) {
                    if (window.location.hash == "#") {
                        alert("Please select a folder.");
                        return false;
                    }
                    if ($("#upload").val() == "") {
                        alert("Please select a file.");
                        return false;
                    }
                    return true;
                });
                
                $(".download").click(function (e) {
                    if (window.location.hash == "#") {
                        alert("Please select a file or folder.");
                        return false;
                    }
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));
                    
                    window.open("@basePath/Download" + node.data.key, '', '');
                    return true;
                });
                
                $(".edit").click(function (e) {
                    if (window.location.hash == "#") {
                        alert("Please select a file.");
                        return false;
                    }
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));

                    if (node.isFolder) {
                        alert("Please select a file.");
                        return false;
                    }

                    window.open("@basePath/Edit?path=" + node.data.key, '', '');
                    return true;
                });
                
                $(".select").click(function (e) {
                    if (window.location.hash == "#") {
                        alert("Please select a file.");
                        return false;
                    }
                    var node = tree.dynatree("getTree").getNodeByKey(window.location.hash.replace("#", ""));

                    if (node.isFolder) {
                        alert("Please select a file.");
                        return false;
                    }

                    ckEditorCallback(node.data.key);
                });
            });
           
        </script>
        <style type="text/css">
            body { text-align: center; }
            .content {
                margin: 0 auto;
                width: 800px;
                text-align: left;
            }
            .action_menu {
                background-color: white;
                border: 1px solid #BBBBBB;
                padding: 0 0 10px 10px;
            }
        </style>
    </head>
    <body>
        <header>
            <h1>Simple Cms File Manager</h1>
        </header>
        <div class="content">
            <div class="action_menu">
                <table>
                    <tbody>
                        <tr>
                            <td><span>Current Path: </span><span class="path" style="padding-right: 20px;">/</span> </td>
                            <td><form method="post" enctype="multipart/form-data" action="@basePath/FileManager"><input type="hidden" name="path" class="pathinput"/><input type="file" name="upload" id="upload"/><input type="submit" value="Upload" class="upload"/></form></td>
                        </tr>
                    </tbody>
                </table>
                <input type="button" class="new-page" value="New Page"/> <input type="button" class="new-directory" value="New Directory"/> <input type="button" class="delete" value="Delete"/> <input type="button" class="edit" value="Edit"/> <input type="button" class="download" value="Download"/> <input type="button" class="select" value="Select"/>
            </div>
            <div id="tree"></div> 
        </div>
        @MiniProfiler.RenderIncludes()
    </body>
</html>
